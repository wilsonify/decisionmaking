struct LocalDirectedGraphSearch
    """
    Local directed graph search, which starts with an initial directed graph G and 
    opportunistically moves to a random graph neighbor whenever its Bayesian score is greater. 
    It repeats this process for k_max iterations.
    Random graph neighbors are generated by either adding or removing a single edge. 
    This algorithm can be extended to include reversing the direction of an edge. 
    Edge addition can result in a graph with cycles, in which case we assign a score of −∞.
    """
    G::Any # initial graph
    k_max::Any # number of iterations
end

function rand_graph_neighbor(G)
    n = nv(G)
    i = rand(1:n)
    j = mod1(i + rand(2:n) - 1, n)
    G′ = copy(G)
    has_edge(G, i, j) ? rem_edge!(G′, i, j) : add_edge!(G′, i, j)
    return G′
end

function fit(method::LocalDirectedGraphSearch, vars, D)
    G = method.G
    y = bayesian_score(vars, G, D)
    for k = 1:method.k_max
        G′ = rand_graph_neighbor(G)
        y′ = is_cyclic(G′) ? -Inf : bayesian_score(vars, G′, D)
        if y′ > y
            y, G = y′, G′
        end
    end
    return G
end
